#!/usr/bin/env python

from glob import glob
import logging
from typing import Optional, Union
import click
import os
from securesystemslib.signer import GCPSigner, HSMSigner
from tuf.api.metadata import Signed, Targets, Root
from tool_repo import ToolRepo

logger = logging.getLogger(__name__)

@click.group()
@click.option("-v", "--verbose", count=True, default=0)
def cli(verbose: int):
    """signing and editing tool for a git-based TUF repository."""
    logger.setLevel(logging.WARNING - verbose * 10)

@cli.command()
@click.option("--gcp-key-id")
@click.option("--user-name", "-u", help="GitHub Username")
def init(gcp_key_id: str, user_name: str):
    """Initialize a new TUF repository."""
    if os.path.exists("repository"):
        raise click.ClickException("repository/ exists already, cannot initialize")

    if not gcp_key_id:
        gcp_key_id = click.prompt("Please enter the Google Cloud KMS key id to use for online signing")
    try:
        online_uri, online_key = GCPSigner.import_(gcp_key_id)
    except Exception as e:
        raise click.ClickException(f"Failed to read Google Cloud KMS key: {e}")
    online_key.unrecognized_fields["x-playground-online-uri"] = online_uri

    click.prompt("Insert HW key to use as initial root and targets key and press enter", default=True, show_default=False)
    try:
        _, root_key = HSMSigner.import_()
    except Exception as e:
        raise click.ClickException(f"Failed to read HW key: {e}")

    if not user_name:
        user_name = click.prompt("Enter root keyowners github username")
    if not user_name.startswith("@"):
        user_name = f"@{user_name}"

    root_key.unrecognized_fields["x-playground-signer"] = user_name

    repo = ToolRepo("repository", user_name)
    with repo.edit("root") as root:
        root.add_key(root_key, "root")
        root.add_key(root_key, "targets")
        root.add_key(online_key, "timestamp")
        root.add_key(online_key, "snapshot")
    
    with repo.edit("targets") as targets:
        pass

    click.echo("Initialized repository")

# TODO support gcp  in add_key
@cli.command()
@click.option("--user-name", "-u", help="GitHub Username")
@click.argument("role")
def add_key(user_name: str, role: str):

    if not user_name:
        user_name = click.prompt("Enter keyowners github username")
    if not user_name.startswith("@"):
        user_name = f"@{user_name}"

    click.prompt(f"Insert HW key to add {user_name} as {role} signer and press enter", default=True, show_default=False)
    try:
        uri, key = HSMSigner.import_()
    except Exception as e:
        raise click.ClickException(f"Failed to read HW key: {e}")

    key.unrecognized_fields["x-playground-signer"] = user_name

    if role in ["root", "timestamp", "snapshot", "targets"]:
        delegating_role = "root"
    else:
        delegating_role = "targets"

    repo = ToolRepo("repository", user_name)
    with repo.edit(delegating_role) as delegator:
        delegator.add_key(key, role)

    click.echo(f"Modified {delegating_role}: Added {user_name} as signer for {role}.")


@cli.command()
@click.option("--user-name", "-u", help="GitHub Username")
@click.argument("role")
@click.argument("threshold", type=int)
def set_threshold(user_name: Optional[str], role: str, threshold: int):
    if user_name and not user_name.startswith("@"):
        user_name = f"@{user_name}"

    if role in ["root", "timestamp", "snapshot", "targets"]:
        delegating_role = "root"
    else:
        delegating_role = "targets"

    repo = ToolRepo("repository", user_name)
    with repo.edit(delegating_role) as delegator:
        delegator: Root
        delegated = delegator.get_delegated_role(role)
        delegated.threshold = threshold

@cli.command()
@click.option("--user-name", "-u", help="GitHub Username")
def sign(user_name: Optional[str]):
    if user_name and not user_name.startswith("@"):
        user_name = f"@{user_name}"

    # TODO figure out what needs signing, instead of trying to sign everything
    repo = ToolRepo("repository", user_name)
    files = glob("*.json", root_dir="repository")
    for fname in files:
        repo.sign(fname[:-len(".json")])


if __name__ == '__main__':
    cli()
