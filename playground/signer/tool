#!/usr/bin/env python

import click
from configparser import ConfigParser
import logging
import sys
import os
from collections import defaultdict
from glob import glob
from securesystemslib.signer import GCPSigner, HSMSigner
from tuf.api.metadata import TargetFile, Root
from typing import Optional

from tool_repo import ToolRepo

logger = logging.getLogger(__name__)

@click.group()
@click.option("--user-name", "-u", help="GitHub Username")
@click.option("-v", "--verbose", count=True, default=0)
@click.pass_context
def cli(ctx, user_name: Optional[str], verbose: int):
    """signing and editing tool for a git-based TUF repository."""
    logger.setLevel(logging.WARNING - verbose * 10)

    config = ConfigParser()
    config.read('.signer-tool.ini')

    if "PYKCS11LIB" not in os.environ and "pykcs11lib" in config["settings"]:
        os.environ["PYKCS11LIB"] = config["settings"]["pykcs11lib"]

    if not user_name and "user-name" in config["settings"]:
        user_name = config["settings"]["user-name"]
    if not user_name.startswith("@"):
        user_name = f"@{user_name}"

    ctx.obj = ToolRepo("repository", user_name)


@cli.command()
@click.option("--gcp-key-id")
@click.pass_obj
def init(repo: ToolRepo, gcp_key_id: str):
    """Initialize a new TUF repository."""
    if not repo.user_name:
        sys.exit("GitHub user name is required when initializing, use --user-name")

    if os.path.exists("repository"):
        raise click.ClickException("repository/ exists already, cannot initialize")

    if not gcp_key_id:
        gcp_key_id = click.prompt("Please enter the Google Cloud KMS key id to use for online signing")
    try:
        online_uri, online_key = GCPSigner.import_(gcp_key_id)
    except Exception as e:
        raise click.ClickException(f"Failed to read Google Cloud KMS key: {e}")
    online_key.unrecognized_fields["x-playground-online-uri"] = online_uri

    click.prompt("Insert HW key to use as initial root and targets key and press enter", default=True, show_default=False)
    try:
        _, root_key = HSMSigner.import_()
    except Exception as e:
        raise click.ClickException(f"Failed to read HW key: {e}")


    root_key.unrecognized_fields["x-playground-signer"] = repo.user_name

    with repo.edit("root") as root:
        root.add_key(root_key, "root")
        root.add_key(root_key, "targets")
        root.add_key(online_key, "timestamp")
        root.add_key(online_key, "snapshot")
    
    with repo.edit("targets") as targets:
        pass

    click.echo("Initialized repository")

# TODO support changing online keys here
@cli.command()
@click.argument("role")
@click.pass_obj
def add_key(repo: ToolRepo, role: str):

    if not repo.user_name:
        sys.exit("GitHub user name is required when adding keys, use --user-name")

    click.prompt(f"Insert HW key to add {repo.user_name} as {role} signer and press enter", default=True, show_default=False)
    try:
        uri, key = HSMSigner.import_()
    except Exception as e:
        raise click.ClickException(f"Failed to read HW key: {e}")

    key.unrecognized_fields["x-playground-signer"] = repo.user_name

    if role in ["root", "timestamp", "snapshot", "targets"]:
        delegating_role = "root"
    else:
        delegating_role = "targets"

    with repo.edit(delegating_role) as delegator:
        delegator.add_key(key, role)

    click.echo(f"Modified {delegating_role}: Added {repo.user_name} as signer for {role}.")


@cli.command()
@click.argument("role")
@click.argument("threshold", type=int)
@click.pass_obj
def set_threshold(repo: ToolRepo, role: str, threshold: int):
    if role in ["root", "timestamp", "snapshot", "targets"]:
        delegating_role = "root"
    else:
        delegating_role = "targets"

    with repo.edit(delegating_role) as delegator:
        delegator: Root
        delegated = delegator.get_delegated_role(role)
        delegated.threshold = threshold

@cli.command()
@click.pass_obj
def sign(repo: ToolRepo):
    # TODO figure out what needs signing, instead of trying to sign everything
    files = glob("*.json", root_dir="repository")
    for fname in files:
        repo.sign(fname[:-len(".json")])


@cli.command()
@click.pass_obj
def update_targets(repo: ToolRepo):
    # go through all target files in targets/, produce TargetFiles for everything
    targets_by_role = defaultdict(dict)
    for name in os.listdir("targets/"):
        if os.path.isdir(f"targets/{name}"):
            for sub_name in os.listdir(f"targets/{name}/"):
                tfile = TargetFile.from_file(
                    f"{name}/{sub_name}",
                    f"targets/{name}/{sub_name}"
                )
                targets_by_role[name][tfile.path] = tfile
        else:
            tfile = TargetFile.from_file(f"{name}", f"targets/{name}")
            targets_by_role["targets"][tfile.path] = tfile

    # then go through each targets metadata and modify if needed
    files = glob("*.json", root_dir="repository")
    for fname in files:
        if fname in ["root.json", "timestamp.json", "snapshot.json"]:
            continue

        role = fname[:-len(".json")]
        target_files = targets_by_role.pop(role, {})
        repo.update_targets(role, target_files)

    if targets_by_role:
        sys.exit(f"Failed to find metadata files for: {', '.join(targets_by_role)}")

if __name__ == '__main__':
    cli()
