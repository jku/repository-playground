#!/usr/bin/env python

import filecmp
from glob import glob
import logging
import os
import subprocess
from tempfile import TemporaryDirectory
from typing import List
import click

from online_repo import OnlineRepo

logger = logging.getLogger(__name__)

@click.group()
@click.option("-v", "--verbose", count=True, default=0)
def cli(verbose: int):
    """repo tool for a CI-based TUF repository."""
    level = max(0, logging.WARNING - verbose * 10)
    logging.basicConfig(level=level, format='%(message)s')

@cli.command()
@click.argument("known-good-sha")
def verify(known_good_sha: str):
    """Verify new submitted metadata for root, targets"""

    with TemporaryDirectory() as tmpdir:
        # fresh git clone
        cmd = ["git", "clone", "--quiet", "./", tmpdir]
        subprocess.check_call(cmd)
        cmd = ["git", "checkout", "--quiet", known_good_sha] 
        subprocess.check_call(cmd)


        # find the files that have changed or been added since known-good-sha
        known_good_dir=f"{tmpdir}/repository"
        files = glob("*.json", root_dir="repository")
        changed_roles = []
        for fname in files:
            if (
                not os.path.exists(f"{known_good_dir}/{fname}") or
                not filecmp.cmp(f"repository/{fname}", f"{known_good_dir}/{fname}",  shallow=False)
            ):
                if fname in ["timestamp.json", "snapshot.json"]:
                    assert("online files changed unexpectedly")

                changed_roles.append(fname[:-len(".json")])

        # reorder toplevels first
        for toplevel in ["targets", "root"]:
            if toplevel in changed_roles:
                changed_roles.remove(toplevel)
                changed_roles.insert(0, toplevel)

        # TODO: assert that repository/root_history changes are correct

        repo = OnlineRepo("repository", known_good_dir)
        for role in changed_roles:
            repo.verify(role)
            logger.debug(f"Verified {role}")

    click.echo(f"Verified {len(changed_roles)} roles")

@cli.command()
@click.argument("known-good-sha")
def status(known_good_sha: str):
    """Print out the signing status of each modified role"""
    with TemporaryDirectory() as tmpdir:
        # fresh git clone
        cmd = ["git", "clone", "--quiet", "./", tmpdir]
        subprocess.check_call(cmd)
        cmd = ["git", "checkout", "--quiet", known_good_sha]
        subprocess.check_call(cmd)

        # find the files that have changed or been added since known-good-sha
        known_good_dir=f"{tmpdir}/repository"
        files = glob("*.json", root_dir="repository")
        changed_roles = []
        for fname in files:
            if (
                not os.path.exists(f"{known_good_dir}/{fname}") or
                not filecmp.cmp(f"repository/{fname}", f"{known_good_dir}/{fname}",  shallow=False)
            ):
                if fname in ["timestamp.json", "snapshot.json"]:
                    assert("online files changed unexpectedly")

                changed_roles.append(fname[:-len(".json")])

        # reorder toplevels first
        for toplevel in ["targets", "root"]:
            if toplevel in changed_roles:
                changed_roles.remove(toplevel)
                changed_roles.insert(0, toplevel)

        repo = OnlineRepo("repository", known_good_dir)
        for role in changed_roles:
            signed, missing, threshold = repo.get_signature_state(role)
            click.echo(f"{role} signing state: {len(signed)}/{threshold} signatures")
            if signed:
                click.echo(f" * Signed by: {', '.join(signed)}")
            if missing:
                click.echo(f" * Signature missing: {', '.join(missing)}")

@cli.command()
def snapshot():
    repo = OnlineRepo("repository")
    updated, _ = repo.snapshot()
    repo.timestamp(force=updated)

    click.echo(f"Snapshot & timestamp")

@cli.command()
def timestamp():
    repo = OnlineRepo("repository")
    repo.timestamp(force=True)

    click.echo(f"Timestamp")

if __name__ == '__main__':
    cli()
